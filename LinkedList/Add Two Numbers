class Solution {
    // Method to add two numbers represented by two linked lists.
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        // Create a dummy node with a value of 0 to simplify the code.
        ListNode dummy = new ListNode(0);
        // Create a temporary pointer 'temp' to traverse the result list.
        ListNode temp = dummy;
        // Initialize a carry variable to store the carry-over value.
        int carry = 0;
        
        // Continue looping until both input lists are exhausted, and there's no carry left.
        while (l1 != null || l2 != null || carry == 1) {
            int sum = 0;
            
            // If l1 is not null, add its value to the sum and move to the next node.
            if (l1 != null) {
                sum += l1.val;
                l1 = l1.next;
            }
            
            // If l2 is not null, add its value to the sum and move to the next node.
            if (l2 != null) {
                sum += l2.val;
                l2 = l2.next;
            }
            
            // Add the carry-over value from the previous iteration.
            sum += carry;
            // Calculate the new carry-over value for the next iteration.
            carry = sum / 10;
            
            // Create a new node with the ones digit of the sum and add it to the result list.
            ListNode node = new ListNode(sum % 10);
            temp.next = node;
            temp = temp.next;
        }
        
        // Return the result list starting from the node after the dummy node.
        return dummy.next;
    }
}
