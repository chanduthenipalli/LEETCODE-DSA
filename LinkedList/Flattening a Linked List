class Flattendlists {
    public static ListNode mergeKLists(ListNode[] lists) {
        // Use a priority queue (min-heap) to store nodes and sort them by their values
        PriorityQueue<ListNode> pq = new PriorityQueue<>((a, b) -> a.val - b.val);

        // Add the head nodes of all K lists to the priority queue
        for (ListNode node : lists) {
            if (node != null) {
                pq.offer(node);
            }
        }

        // Create a dummy head node to build the merged list
        ListNode dummy = new ListNode(0);
        ListNode tail = dummy;

        // Keep polling the smallest node from the priority queue and adding it to the merged list
        while (!pq.isEmpty()) {
            ListNode node = pq.poll();
            tail.next = node; // Add the node to the merged list
            tail = node; // Update the tail pointer to the newly added node

            // If there is a next node in the current list, add it to the priority queue
            if (node.next != null) {
                pq.offer(node.next);
            }
        }

        return dummy.next; // Return the merged sorted list (skip the dummy head node)
    }
}
