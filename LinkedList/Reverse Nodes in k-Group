/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    // Function to reverse K nodes at a time in a linked list
    public ListNode reverseKGroup(ListNode head, int k) 
    {
        // If the linked list is empty or has only one node, no need to reverse, return head
        if (head == null || head.next == null) {
            return head;
        }
        
        int length = Length(head); // Get the length of the linked list
        ListNode dummyHead = new ListNode(0); // Create a dummy node to simplify the process
        dummyHead.next = head; // Set dummy's next to the original head
        ListNode prev = dummyHead; // Initialize the previous node
        
        ListNode current;
        ListNode next;
        
        while (length >= k) // Continue reversing as long as there are K or more nodes remaining
        {
            current = prev.next; // Current node to start the reverse process
            next = current.next; // Next node to keep track of the rest of the list
            
            // Reverse K nodes
            for (int i = 1; i < k; i++) 
            {
                current.next = next.next; // Disconnect current node from the rest of the list
                next.next = prev.next; // Connect next node to the previous part of the list
                prev.next = next; // Update the previous node's next to the new reversed part
                next = current.next; // Move next to the start of the remaining list
            }
            
            prev = current; // Update the previous node for the next iteration
            length -= k; // Decrease the remaining length by K
        }
        
        return dummyHead.next; // Return the head of the reversed linked list
    }
    
    // Function to calculate the length of a linked list
    public int Length(ListNode head)
    {
        int length = 0;
        while (head != null)
        {
            ++length;
            head = head.next;
        }
        return length;
    }
}
